#+STARTUP: showall

* introduction
** install

** start

* jm
** producer

** consumer

** message
*** producer header

*** consumer header

*** provider header

*** jms properties
JMSXAppID —Identifies the application sending the message
JMSXConsumerTXID —The transaction identifier for the transaction within which
this message was consumed
JMSXDeliveryCount—The number of message delivery attempts
JMSXGroupID —The message group of which this message is a part
JMSXGroupSeq—The sequence number of this message within the group
JMSXProducerTXID —The transaction identifier for the transaction within which
this message was produced
JMSXRcvTimestamp —The time the JMS provider delivered the message to the
consumer
JMSXState—Used to define a provider-specific state
JMSXUserID —Identifies the user sending the message
*** message selector
Literals Booleans TRUE/FALSE; numbers such as 5, -10, +34; numbers with decimal or
        scientific notation such as 43.3E7, +10.5239
Identifiers A header or property field
Operators AND, OR, LIKE, BETWEEN, =, <>, <, >, <=, =>, +, -, *, /, IS NULL, IS NOT NULL

*** 

** connector
<transportConnectors>
<transportConnector name="tcp"
uri="tcp://localhost:61616?trace=true"/>
</transportConnectors>

* keystore
** custom other keystore
*** gen key
1.create a keystore and a certificate for the broker
keytool -genkey -alias broker -keyalg RSA -keystore mybroker.ks
keytool -export -alias broker -keystore mybroker.ks -file mybroker_cert					
2.create a client keystore with the appropriate certificate
keytool -genkey -alias client -keyalg RSA -keystore myclient.ks
3.keytool -import -alias broker -keystore myclient.ts -file mybroker_cert
*** set keystore location
- M1
 {ACTIVEMQ_HOME}/bin/activemq console \
 -Djavax.net.ssl.keyStorePassword=test123 \
 -Djavax.net.ssl.keyStore=${ACTIVEMQ_HOME}/conf/mybroker.ks
- M2
<broker xmlns="http://activemq.apache.org/schema/core" brokerName="localhost" dataDirectory="${activemq.base}/data">
<sslContext>
<sslContext keyStore="file:${activemq.base}/conf/mybroker.ks" keyStorePassword="test123"/>
  </sslContext>
  <transportConnectors>
   <transportConnector name="ssl"
    uri="ssl://localhost:61617" />
   </transportConnectors>
</broker>
*** client
mvn \
-Djavax.net.ssl.keyStore=${ACTIVEMQ_HOME}/conf/myclient.ks \
-Djavax.net.ssl.keyStorePassword=test123 \
-Djavax.net.ssl.trustStore=${ACTIVEMQ_HOME}/conf/myclient.ts \
exec:java -Dexec.mainClass=org.apache.activemq.book.ch4.Publisher \
*** ENABLING AND DISABLING SSL CIPHERS
<transportConnectors>
   <transportConnector
   name="ssl"
   uri="ssl://localhost:61617?
transport.enabledCipherSuites=SSL_RSA_WITH_RC4_128_SHA" />
</transportConnectors>

* network connectors
** static network
*** broker
static:(uri1,uri2,uri3,...)?key=value
*** client
failover:(uri1,...,uriN)?key=value
failover:uri1,...,uriN

** dynamic network
*** multicast connector
224.0.0.0 to 239.255.255.255
multicast://ipadaddress:port?key=value
*** DISCOVERY PROTOCOL
discovery:(discoveryAgentURI)?key=value
*** PEER PROTOCOL
peer://peergroup/brokerName?key=value
*** FANOUT CONNECTOR
fanout:(fanoutURI)?key=value
fanout:(static:(tcp://host1:61616,tcp://host2:61616,tcp://host3:61616))
fanout:(multicast://default)

* message storage










